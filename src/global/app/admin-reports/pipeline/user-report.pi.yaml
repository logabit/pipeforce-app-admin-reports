headers:
  description: "Generates sop users for all sop groups filtered by protectionClass and responsibilities structure"

vars:
  protectionClass: null # To be set by the caller as input args
  usersFilter: "#{@util.toList('[]')}"
pipeline:
  - iam.user.list:
  - set.var:
      key: "users"
      value: "#{body}"
      output: "#{vars.users}"
      
  - iam.group.members:
      name: "members"
  - set.var:
      key: "members"
      value: "#{body}"
      output: "#{vars.members}"
      
  - iam.group.list.names:
      name: "lists"
  - set.var:
      key: "lists"
      value: "#{body}"
      output: "#{vars.lists}"
      
  - sql.query:
      datasource: "drive"
      query: |
        SELECT substring(storages.id from 7) AS owner,
               fileid,
               name,
               storage,
               to_timestamp(mtime) AS "lastmodified",
               pg_size_pretty(SIZE) AS "humansize",
               path
        FROM filecache,
             storages,
             mimetypes
        WHERE filecache.storage = storages.numeric_id
          AND storages.id LIKE 'home::%'
          AND filecache.mimetype = mimetypes.id
          AND mimetypes.mimetype != 'httpd/unix-directory'
        ORDER BY SIZE DESC
        LIMIT 25
  
  - script.run:
      script: |
        function command() {
          function fetchingUser(users) {
            var userLists = [];
            var quotas = [];
            var returnData = [];
            var driveData = [];
            
            for (di = 0; di < pi.message.body.length; ++di) {
              driveData[di] = {
                owner: pi.message.body[di].owner,
                size: pi.message.body[di].humansize,
                storage: pi.message.body[di].storage
              };
            }
            
            
            function getQuotas(devQuota) {
              var quotaValue = 0;
              if(devQuota) {
                  quotaValue = devQuota.drivequota[0] || 0;
              }
              
              return quotaValue || 0;
            }
            
            
            function calcStorageUsage(storageArr) {
              var sum = 0;

              for(si = 0; si < storageArr.length; ++si) {
                sum += parseFloat(storageArr[si]);
              }
              
              return Math.ceil(sum / 1024 / 1024 );
            }
            
            for (index = 0; index < users.length; ++index) {
                userLists[index] = users[index]['username'];
                quotas[index] = getQuotas(users[index]['attributes']);
                
                var biggestFileArr = [];
                var storageData = [];
                driveData.forEach(function(driveItem) {
                  if(driveItem.owner === users[index]['username']) {
                    biggestFileArr.push(driveItem.size)
                    storageData.push(driveItem.storage)
                  }
                });
                
                returnData[index] = {
                  "user": users[index]['username'],
                  "quota": getQuotas(users[index]['attributes']) || "",
                  "storage-in-use": calcStorageUsage(storageData) + " GB",
                  "5-biggest-files": biggestFileArr.join(','),
                };
            }
            
            
            return returnData;
          }
            
            var res = JSON.stringify(fetchingUser(pi.message.vars["users"]));
            return res;
        }