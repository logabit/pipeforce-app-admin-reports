headers:
  description: "Returns the 25 biggest files stored in Drive."
pipeline:

  - sql.query:
      datasource: "drive"
      query: |
        SELECT to_timestamp(mtime) AS "modified",
               to_timestamp(storage_mtime) AS "stored",
               to_timestamp(upload_time) AS "uploaded"
        FROM filecache f FULL OUTER JOIN filecache_extended fe
        on f.fileid = fe.fileid,
             storages,
             mimetypes
        WHERE f.storage = storages.numeric_id
          AND storages.id LIKE 'home::%'
          AND f.mimetype = mimetypes.id
          AND mimetypes.mimetype != 'httpd/unix-directory'
        ORDER BY modified DESC
  - script.run:
      script: |
        function command() {
          function getLabels() {
            var labels = [];
            var today = new Date();
            
            for(i = 1; i < 30; ++i) {
              var year = today.getFullYear();
              var date = today.getDate();
              var month = today.getMonth() + 1;
              
              labels[i-1] = year + "-" + month + "-" + date;
              today = new Date(new Date().setDate(new Date().getDate()-i));
            }
            
            return labels;
          }

          function getLabelsForGraph() {
            var labels = [];
            var today = new Date();
            
            var monthNames = ["Jan", "Feb", "March", "April", "May", "June", "July", "Aug", "Sept", "Oct", "Nov", "Dec"];
            var dates = ["01", "02", "03", "04", "05", "06", "07", "08", "09"]           
            
            for(i = 1; i < 30; ++i) {
              var year = today.getFullYear();
              var date = today.getDate();
              var month = today.getMonth();
              var new_date = date;

              if (Number(date) < 10){
                new_date = dates[date-1];
              }
              
              labels[i-1] = new_date + "-" + monthNames[month] + "-" + year;
              today = new Date(new Date().setDate(new Date().getDate()-i));
              today = new Date(new Date().setDate(new Date().getDate()-i));
            }
            
            return labels.reverse();
          }
          
          
          function getData() {
            var fileUploaded = [];
            var fileCreated = [];
            var fileModified = [];
            var fileData = [];
            
            for (fi = 0; fi < pi.message.body.length; ++fi) {
              var modified = pi.message.body[fi].modified;
              var stored = pi.message.body[fi].stored;
              var uploaded = pi.message.body[fi].uploaded;
              
              var modifiedYear = new Date(modified).getFullYear();
              var modifiedDate = new Date(modified).getDate();
              var modifiedMonth = new Date(modified).getMonth() + 1;
              
              var storedYear = new Date(stored).getFullYear();
              var storedDate = new Date(stored).getDate();
              var storedMonth = new Date(stored).getMonth() + 1;

              var uploadedYear = new Date(uploaded).getFullYear();
              var uploadedDate = new Date(uploaded).getDate();
              var uploadedMonth = new Date(uploaded).getMonth() + 1;          
              
              fileData[fi] = {
                modified: modifiedYear + "-" + modifiedMonth + "-" + modifiedDate,
                stored: storedYear + "-" + storedMonth + "-" + storedDate,
                uploaded: uploadedYear + "-" + uploadedMonth + "-" + uploadedDate
              }

              if (!uploaded){
                fileData[fi] = {
                  modified: modifiedYear + "-" + modifiedMonth + "-" + modifiedDate,
                  stored: storedYear + "-" + storedMonth + "-" + storedDate,
                  uploaded: null
               }
              }
            }
            
            var labels = getLabels();
            for(li = 0; li < labels.length; ++li) {

              fileUploaded[li] = fileData.filter(function(item) {
                var storedYear = new Date(item.stored).getFullYear();
                var uploadedYear = new Date(item.uploaded).getFullYear();
                return item.uploaded === labels[li] && item.uploaded && storedYear != uploadedYear;
              }).length;
              
              fileCreated[li] = fileData.filter(function(item) {
                var storedYear = new Date(item.stored).getFullYear();
                var uploadedYear = new Date(item.uploaded).getFullYear();
                return item.uploaded === labels[li] && item.uploaded && storedYear == uploadedYear;
              }).length;
              
              fileModified[li] = fileData.filter(function(item){ 
              return item.modified === labels[li] && !item.uploaded; 
              }).length;
            }
            
            return [
              {
                "label":"File Uploaded",
                "data": fileUploaded.reverse(),
                "borderColor": "rgb(255,99,132)",
                "backgroundColor": "rgb(255,99,132)",
                "tension": 0.1,
                "fill": true,
                "pointBorderColor" : "white"
              },
              {
                "label":"File Created",
                "data": fileCreated.reverse(),
                "borderColor": "rgb(255,205,86)",
                "backgroundColor": "rgb(255,205,86)",
                "tension": 0.1,
                "fill": true,
                "pointBorderColor" : "white"
              },
              {
                "label":"File Modified",
                "data": fileModified.reverse(),
                "borderColor": "rgb(54,162,235)",
                "backgroundColor": "rgb(54,162,235)",
                "tension": 0.1,
                "fill": true,
                "pointBorderColor" : "white"
              }
            ]
          }
          
          var res = {
            labels: getLabelsForGraph(),
            datasets: getData()
          };
          
          return JSON.stringify(res);
        }
  - set.body:
      value: "#{@json.load(body)}"