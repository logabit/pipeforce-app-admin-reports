headers:
  description: "Generates sop users for all sop groups filtered by protectionClass and responsibilities structure"

vars:
  protectionClass: null # To be set by the caller as input args
  usersFilter: "#{@util.toList('[]')}"
pipeline:
  - iam.user.list:
      includeGroups: true
  - set.var:
      key: "users"
      value: "#{body}"
      output: "#{vars.users}"
      
  - iam.group.members:
      name: "members"
  - set.var:
      key: "members"
      value: "#{body}"
      output: "#{vars.members}"
      
  - iam.group.list.names:
      name: "lists"
  - set.var:
      key: "lists"
      value: "#{body}"
      output: "#{vars.lists}"
      
  - sql.query:
      datasource: "drive"
      query: |
        SELECT substring(storages.id from 7) AS owner,
               fileid,
               name,
               storage,
               to_timestamp(mtime) AS "lastmodified",
               pg_size_pretty(SIZE) AS "humansize",
               path
        FROM filecache,
             storages,
             mimetypes
        WHERE filecache.storage = storages.numeric_id
          AND storages.id LIKE 'home::%'
          AND filecache.mimetype = mimetypes.id
          AND mimetypes.mimetype != 'httpd/unix-directory'
        ORDER BY SIZE DESC
        LIMIT 25
  
  - script.run:
      script: |
        function command() {
          function fetchingUser(users) {
            var arr = []
              var userLists = [];
              var quotas = [];
              var returnData = [];
              var driveData = [];

              for (di = 0; di < pi.message.body.length; ++di) {
                driveData[di] = {
                  owner: pi.message.body[di].owner,
                  size: pi.message.body[di].humansize,
                  storage: pi.message.body[di].storage
                };
              }

              function getQuotas(devQuota) {
                var quotaValue = 0;
                if(devQuota) {
                    quotaValue = devQuota.drivequota[0] || 0;
                }

                if (quotaValue == ''){
                  quotaValue = 'UNLIMITED'
                }
                return quotaValue || 0;
              }


              function calcStorageUsage(storageArr) {
                var sum = 0;

                for(si = 0; si < storageArr.length; ++si) {
                  sum += parseFloat(storageArr[si]);
                }

                return sum;
              }

              for (index = 0; index < users.length; ++index) {
                  userLists[index] = users[index]['username'];
                  quotas[index] = getQuotas(users[index]['attributes']);

                  var biggestFileArr = [];
                  var storageData = [];
                  var groups = [];
                  count = 0;
                  driveData.forEach(function(driveItem) {
                    if(driveItem.owner === users[index]['username']) {
                    if (count < 5){biggestFileArr.push(driveItem.size)}
                    count++;
                    storageData.push(driveItem.storage)
                    }
                  });

                  function getGroups(userGroups) {
                    if (userGroups){
                      userGroups.forEach(function(group) {
                        groups.push(group)
                      });
                    }
                    return groups;
                  }

                  var newDate = new Date();
                  newDate.setTime(users[index]['createdTimestamp']);
                  createdDate = newDate.toISOString();

                  returnData[index] = {
                    "user": users[index]['username'],
                    "firstName": users[index]['firstName'],
                    "lastName": users[index]['lastName'],
                    "email": users[index]['email'],
                    "created": createdDate || "",
                    "quota": getQuotas(users[index]['attributes']) || "",
                    "groups": getGroups(users[index]['groups']).join(', ') || "",
                    "storageInUse": calcStorageUsage(storageData) + " KB",
                    "fiveBiggestFiles": biggestFileArr.join(', '),
                  };
                arr.push(returnData)
              }
              return arr[0];
          }

          var res = []
          res = JSON.stringify(fetchingUser(pi.message.vars["users"]));
          return res;
        }
  - set.body:
      value: "#{@json.load(body)}"
